// Import pipeline from Xenova transformers CDN (stable correct URL)
import { pipeline } from 'https://cdn.jsdelivr.net/npm/@xenova/transformers@2.17.2';

// --- UI Navigation (Assumes HTML with corresponding IDs) ---
/**
 * Shows a specific section of the page and hides all others.
 * @param {string} secId The ID of the section to show.
 */
function showSection(secId) {
    document.querySelectorAll('section').forEach(s => (s.style.display = 'none'));
    const active = document.getElementById(secId);
    if (active) active.style.display = 'block';
}

// Add event listeners for navigation buttons if they exist
document.getElementById('menuAbout')?.addEventListener('click', () => showSection('aboutPage'));
document.getElementById('menuInsert')?.addEventListener('click', () => showSection('insertPage'));
document.getElementById('menuTools')?.addEventListener('click', () => showSection('toolsPage'));

// --- Main AI Application Logic ---
(async () => {
    // Get references to all necessary UI elements
    const respDiv = document.getElementById('aiResponse');
    const askBtn = document.getElementById('askAIButton');
    const clearBtn = document.getElementById('clearAIButton');
    const queryInput = document.getElementById('aiQuery');

    // Add a new element for the loading progress
    const loadingProgressDiv = document.createElement('div');
    loadingProgressDiv.id = 'loadingProgress';
    loadingProgressDiv.style.display = 'none';
    respDiv.parentNode.insertBefore(loadingProgressDiv, respDiv.nextSibling);

    // **ERROR HANDLING 1:** Check for required DOM elements immediately.
    if (!respDiv || !askBtn || !queryInput) {
        const errorMessage = '‚ùå Fatal Error: Missing required DOM elements (aiResponse, askAIButton, or aiQuery). Please check your HTML file.';
        console.error(errorMessage);
        if (respDiv) {
            respDiv.style.display = 'block';
            respDiv.textContent = errorMessage;
        }
        return;
    }

    // Set initial loading state for the user
    respDiv.style.display = 'block';
    respDiv.textContent = '‚è≥ Loading AI model... (this may take a minute or two on the first run)';
    askBtn.disabled = true;

    let generator;
    try {
        // Allocate a pipeline for text generation.
        // The `progress_callback` function is new, and it updates the UI with the download status.
        generator = await pipeline('text-generation', 'Xenova/bloomz-560m', {
            progress_callback: (progress) => {
                if (progress.status === 'downloading') {
                    const percent = Math.round(progress.progress * 100);
                    respDiv.textContent = `‚è≥ Downloading AI model: ${percent}%`;
                }
            }
        });

        // Once the model is loaded, update the UI to indicate readiness.
        respDiv.textContent = '‚úÖ AI is ready! Please ask your devotional question in English or Telugu.';
        askBtn.disabled = false;
    } catch (err) {
        // **ERROR HANDLING 2:** Catch and report model loading errors.
        respDiv.textContent = `‚ùå Failed to load AI model. Details: ${err.message}. Please reload the page and try again.`;
        console.error('Model loading error:', err);
        askBtn.disabled = true;
        return;
    }

    /**
     * Checks if the input text contains Telugu characters.
     * @param {string} text The text to check.
     * @returns {boolean} True if the text contains Telugu characters, otherwise false.
     */
    function isTelugu(text) {
        return /[\u0C00-\u0C7F]/.test(text);
    }

    /**
     * Escapes special regex characters in a string.
     * @param {string} text The text to escape.
     * @returns {string} The escaped string.
     */
    function escapeRegExp(text) {
        return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    // Clear button resets the input field and hides the response.
    clearBtn.addEventListener('click', () => {
        queryInput.value = '';
        respDiv.style.display = 'none';
        respDiv.textContent = '';
        askBtn.disabled = false;
        askBtn.textContent = 'Ask AI';
        queryInput.focus();
    });

    // Ask button triggers the AI text generation.
    askBtn.addEventListener('click', async () => {
        // Prevent multiple clicks while processing.
        if (askBtn.disabled) return;

        let userInput = queryInput.value.trim();

        // Validate user input.
        if (!userInput) {
            respDiv.style.display = 'block';
            respDiv.textContent = '‚ö† Please enter a question.';
            return;
        }

        const usingTelugu = isTelugu(userInput);

        const promptPrefixEnglish =
            "You are a knowledgeable, respectful, and compassionate spiritual guide on the Hindu epic Ramayana and the sacred traditions of Rama Koti. " +
            "Your answers must be: devotional, informative, and strictly based on the Ramayana. " +
            "Provide concise answers in 2-3 paragraphs. If the question is not about the Ramayana or Rama Koti, you must politely decline to answer. " +
            "Never generate generic or unrelated content. Your tone should be gentle and reverent. The question is as follows:\n\n";

        const promptPrefixTelugu =
            "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞∞‡∞æ‡∞Æ‡∞æ‡∞Ø‡∞£‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∞‡∞æ‡∞Æ ‡∞ï‡±ã‡∞ü‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡∞≤‡±ã ‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞µ‡∞Ç‡∞§‡∞Æ‡±à‡∞®, ‡∞ó‡±å‡∞∞‡∞µ‡∞®‡±Ä‡∞Ø‡∞Æ‡±à‡∞® ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞¶‡∞Ø‡∞ó‡∞≤ ‡∞Ü‡∞ß‡±ç‡∞Ø‡∞æ‡∞§‡±ç‡∞Æ‡∞ø‡∞ï ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞ï‡±Å‡∞≤‡±Å. " +
            "‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å ‡∞≠‡∞ï‡±ç‡∞§‡∞ø‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞ï‡∞Ç‡∞ó‡∞æ, ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç‡∞§‡±ã ‡∞ï‡±Ç‡∞°‡∞ø‡∞®‡∞µ‡∞ø‡∞ó‡∞æ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∞‡∞æ‡∞Æ‡∞æ‡∞Ø‡∞£‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ä‡∞®‡∞ø ‡∞â‡∞Ç‡∞°‡∞æ‡∞≤‡∞ø. " +
            "‡∞∏‡∞Ç‡∞ï‡±ç‡∞∑‡∞ø‡∞™‡±ç‡∞§‡∞Ç‡∞ó‡∞æ, 2-3 ‡∞™‡±á‡∞∞‡∞æ‡∞≤‡∞≤‡±ã ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø. ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞∞‡∞æ‡∞Æ‡∞æ‡∞Ø‡∞£‡∞Ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞∞‡∞æ‡∞Æ ‡∞ï‡±ã‡∞ü‡∞ø ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞ï‡∞æ‡∞ï‡∞™‡±ã‡∞§‡±á, ‡∞¶‡∞Ø‡∞§‡±ã ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞°‡∞Ç ‡∞®‡∞ø‡∞∞‡∞æ‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø. " +
            "‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞≤‡±á‡∞¶‡∞æ ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞Ç ‡∞≤‡±á‡∞®‡∞ø ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞æ‡∞≤‡∞®‡±Å ‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞µ‡∞¶‡±ç‡∞¶‡±Å. ‡∞Æ‡±Ä ‡∞∂‡±à‡∞≤‡∞ø ‡∞∏‡±Å‡∞®‡±ç‡∞®‡∞ø‡∞§‡∞Ç‡∞ó‡∞æ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ó‡±å‡∞∞‡∞µ‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞°‡∞æ‡∞≤‡∞ø. ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞à ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶‡∞ø ‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø:\n\n";

        const finalPrompt = `${usingTelugu ? promptPrefixTelugu : promptPrefixEnglish}Q: ${userInput}\nA:`;

        // Update UI to show that the AI is processing.
        askBtn.disabled = true;
        const originalBtnText = askBtn.textContent;
        askBtn.innerHTML = 'Loading‚Ä¶ <span class="spinner" aria-hidden="true"></span>';
        respDiv.style.display = 'block';
        respDiv.textContent = '‚è≥ Generating response...';

        try {
            console.log('Prompt sent:', finalPrompt);

            // --- Refined Generation Parameters and Timeout ---
            const results = await generator(finalPrompt, {
                max_length: 200,
                do_sample: true,
                temperature: 0.8,
                top_p: 0.95,
                timeout: 30000
            });

            console.log('AI response:', results[0].generated_text);

            let generatedText = results[0].generated_text;

            // Clean up the generated text.
            if (generatedText.startsWith(finalPrompt)) {
                generatedText = generatedText.slice(finalPrompt.length).trim();
            }

            const answerMatch = generatedText.match(/^([\s\S]*?)(?:\nQ:|$)/);
            if (answerMatch) {
                generatedText = answerMatch[1].trim();
            }

            // **ERROR HANDLING 4:** Improved fallback logic for bad answers.
            const repeatedPattern = new RegExp(`^(?:${escapeRegExp(userInput)}\\s*)+$`, 'i');
            const refusalKeywordsEnglish = ["sorry", "apologies", "decline to answer", "cannot answer", "not about Ramayana"];
            const refusalKeywordsTelugu = ["‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", "‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞≤‡±á‡∞®‡±Å", "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±á‡∞∞‡±á ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø", "‡∞∞‡∞æ‡∞Æ‡∞æ‡∞Ø‡∞£‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞ï‡∞æ‡∞¶‡±Å"];
            const refusalKeywords = usingTelugu ? refusalKeywordsTelugu : refusalKeywordsEnglish;

            const isBadResponse = !generatedText ||
                                  generatedText.length < 50 ||
                                  repeatedPattern.test(generatedText) ||
                                  generatedText.toLowerCase().includes(userInput.toLowerCase().repeat(2));

            // Check if the response is a refusal, and if so, give a helpful message.
            if (refusalKeywords.some(keyword => generatedText.toLowerCase().includes(keyword))) {
                 respDiv.textContent = usingTelugu
                    ? 'üôè ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞∞‡∞æ‡∞Æ‡∞æ‡∞Ø‡∞£‡∞Ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞∞‡∞æ‡∞Æ ‡∞ï‡±ã‡∞ü‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.'
                    : "üôè Please ask a question specifically about the Ramayana or Rama Koti traditions.";
            } else if (isBadResponse) {
                // If it's a generally bad response, use the generic fallback.
                respDiv.textContent = usingTelugu
                    ? 'üôè ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Ö‡∞°‡∞ø‡∞ó‡∞ø‡∞® ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞ï‡±Å ‡∞∏‡∞∞‡±à‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±á‡∞∞‡±á ‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.'
                    : "üôè Sorry, I couldn't generate a meaningful devotional response. Please try rephrasing your question.";
            } else {
                // Otherwise, the response is good to go.
                respDiv.textContent = generatedText;
            }

        } catch (error) {
            // **ERROR HANDLING 5:** Catch and report any runtime errors during text generation.
            console.error('Error generating AI response:', error);
            respDiv.textContent = usingTelugu
                ? '‚ùå ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞°‡∞Ç‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø. ‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï ‡∞≤‡±ã‡∞™‡∞Ç: ' + error.message
                : '‚ùå Error generating response. Please try again later. Technical Error: ' + error.message;
        } finally {
            // Always restore the button state and text after processing is complete.
            askBtn.disabled = false;
            askBtn.innerHTML = originalBtnText;
            respDiv.style.display = 'block';
        }
    });
})();

// **ERROR HANDLING 6:** Global error handlers to catch unexpected issues.
window.addEventListener('error', e => console.error('Uncaught error:', e.error || e.message));
window.addEventListener('unhandledrejection', e => console.error('Unhandled promise rejection:', e.reason || e.message));
